//
//  HeadingStyleKit.swift
//  Compass
//
//  Created by Dan Zeitman on 6/30/19.
//  Copyright Â© 2019 Bose. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class HeadingStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawHeading(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 260), resizing: ResizingBehavior = .aspectFit, degrees: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 260), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 260)


        //// Color Declarations
        let lightHandColor = UIColor(red: 0.012, green: 0.055, blue: 0.216, alpha: 1.000)

        //// Variable Declarations
        let secondsAngle: CGFloat = -degrees / 360.0 * 360

        //// indicator Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -(secondsAngle + 90) * CGFloat.pi/180)

        let indicatorPath = UIBezierPath()
        indicatorPath.move(to: CGPoint(x: 4.24, y: -4.24))
        indicatorPath.addCurve(to: CGPoint(x: 9, y: -7), controlPoint1: CGPoint(x: 5.16, y: -3.33), controlPoint2: CGPoint(x: 8.8, y: -8.19))
        indicatorPath.addLine(to: CGPoint(x: 99, y: -1))
        indicatorPath.addLine(to: CGPoint(x: 99, y: 1))
        indicatorPath.addLine(to: CGPoint(x: 9, y: 8))
        indicatorPath.addCurve(to: CGPoint(x: 4.24, y: 4.24), controlPoint1: CGPoint(x: 8.8, y: 9.19), controlPoint2: CGPoint(x: 5.16, y: 3.33))
        indicatorPath.addCurve(to: CGPoint(x: -4.24, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 6.59), controlPoint2: CGPoint(x: -1.9, y: 6.59))
        indicatorPath.addCurve(to: CGPoint(x: -4.24, y: -4.24), controlPoint1: CGPoint(x: -6.59, y: 1.9), controlPoint2: CGPoint(x: -6.59, y: -1.9))
        indicatorPath.addCurve(to: CGPoint(x: 4.24, y: -4.24), controlPoint1: CGPoint(x: -1.9, y: -6.59), controlPoint2: CGPoint(x: 1.9, y: -6.59))
        indicatorPath.close()
        lightHandColor.setFill()
        indicatorPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCompassPlayground() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 90, y: 30, width: 258, height: 258)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HeadingStyleKit.drawHeading(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, degrees: 39)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 348, y: 33, width: 253, height: 253)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        HeadingStyleKit.drawHeading(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, degrees: 3)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 611, y: 33, width: 260, height: 260)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        HeadingStyleKit.drawHeading(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, degrees: 43)
        context.restoreGState()
    }




    @objc(HeadingStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
